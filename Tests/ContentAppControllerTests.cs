using Cloudy.CMS.ContainerSpecificContentSupport.RepositorySupport;
using Cloudy.CMS.ContentSupport;
using Cloudy.CMS.ContentTypeSupport;
using Cloudy.CMS.DocumentSupport;
using Cloudy.CMS.UI.ContentAppSupport;
using Moq;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Text;
using Xunit;

namespace Tests
{
    public class ContentAppControllerTests
    {
        [Fact]
        public void OverwritesAutoGeneratedFields()
        {
            var contentTypeId = "amet";
            var container = "vestibulum";

            var propertyDefinitions = new List<PropertyDefinitionDescriptor>
            {
                new PropertyDefinitionDescriptor(nameof(MyContent.Generated), typeof(string), c => ((MyContent)c).Generated, (c, v) => ((MyContent)c).Generated = (string)v, typeof(MyContent).GetProperty(nameof(MyContent.Generated)).GetCustomAttributes()),
                new PropertyDefinitionDescriptor(nameof(MyContent.NotGenerated), typeof(string), c => ((MyContent)c).NotGenerated, (c, v) => ((MyContent)c).NotGenerated = (string)v, typeof(MyContent).GetProperty(nameof(MyContent.NotGenerated)).GetCustomAttributes()),
            };

            var contentType = new ContentTypeDescriptor(contentTypeId, typeof(MyContent), container, propertyDefinitions, Enumerable.Empty<CoreInterfaceDescriptor>());

            var contentTypeRepository = Mock.Of<IContentTypeProvider>();
            Mock.Get(contentTypeRepository).Setup(r => r.Get(contentTypeId)).Returns(contentType);

            var id = "lorem";

            var a = new MyContent
            {
                Id = id,
                Generated = "ipsum",
                NotGenerated = "dolor",
            };

            var b = new MyContent
            {
                Id = id,
                Generated = "sit",
                NotGenerated = null,
            };

            var body = new ContentAppController.SaveContentRequestBody
            {
                Id = id,
                ContentTypeId = contentTypeId,
                Content = JsonConvert.SerializeObject(b),
            };

            var containerSpecificContentUpdater = Mock.Of<IContainerSpecificContentUpdater>();

            Mock.Get(containerSpecificContentUpdater).Setup(u => u.Update(It.IsAny<MyContent>(), container)).Callback<IContent, string>((content, _) => {
                Assert.Equal(b.Generated, ((MyContent)content).Generated);
                Assert.Equal(a.NotGenerated, ((MyContent)content).NotGenerated);
            });

            var containerSpecificContentGetter = Mock.Of<IContainerSpecificContentGetter>();

            Mock.Get(containerSpecificContentGetter).Setup(g => g.Get<MyContent>(id, null, container)).Returns(a);

            new ContentAppController(contentTypeRepository, containerSpecificContentGetter, null, containerSpecificContentUpdater, null, null, null, null, null, null, null, null, null).SaveContent(body);

            Mock.Get(containerSpecificContentUpdater).Verify(u => u.Update(It.IsAny<MyContent>(), container));
        }

        public class MyContent : IContent
        {
            public string Id { get; set; }
            public string ContentTypeId { get; set; }

            [Display(AutoGenerateField = true)]
            public string Generated { get; set; }

            [Display(AutoGenerateField = false)]
            public string NotGenerated { get; set; }
        }
    }
}
